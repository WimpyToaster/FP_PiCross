#descobre o len do maior

def lenmax(t):
    lenmax = len(t[0])
    for i in range(len(t)):
        if lenmax < len(t[i]):
            lenmax = len(t[i])
    return lenmax

def acrescenta_tuple_colunas(t, n):
    s=()
    for i in range(len(t)):
        l=t[i]
        while len(l)<n:
            l=(0,)+l
        s+=(l,)
    return s

def acrescenta_tuple_linhas(t, n):
    s=()
    for i in range(len(t)):
        l=t[i]
        while len(l)<n:
            l=l+(0,)
        s+=(l,)
    return s


import ast

def le_tabuleiro(fich):
    f = open(fich,'r')
    l = f.readline()
    f.close()
    return ast.literal_eval(l)

def pede_jogada(tab):
    if not (e_tabuleiro(tab)):
        raise ValueError('pede_jogada: argumentos invalidos')
    
    dim = tabuleiro_dimensoes(tab)[0]
    c = input('Introduza a jogada\n' + '- coordenada entre ' + coordenada_para_cadeia((1,1)) + \
        ' e ' + coordenada_para_cadeia((dim,dim)) + ' >> ')
    
    c = str(c[1:-1])                #Recebe a string no formato do retorno do
    coor1 = int(c.split(':')[0])    #   coordenada_para_cadeia e obtem os dois
    coor2 = int(c.split(':')[1])    #   inteiros introduzidos.
    v = input('- valor >> ')

    if v.isdigit:
        v = int(v)
        
    if (coor1 <= dim) and (coor2 <= dim):
        if e_jogada(cria_jogada((coor1,coor2),v)):
            return cria_jogada((coor1,coor2),v)
    return False
