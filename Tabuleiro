# Tabuleiro
import operator
import functools

# funcoes auxiliares

def lenmax(t):
    lenmax = len(t[0])
    for i in range(len(t)):
        if lenmax < len(t[i]):
            lenmax=len(t[i])
    return lenmax

def acrescenta_tuple_colunas(t, n):
    s=()
    for i in range(len(t)):
        l=t[i]
        while len(l)<n:
            l=(0,)+l
        s+=(l,)
    return s

def acrescenta_tuple_linhas(t, n):
    s=()
    for i in range(len(t)):
        l=t[i]
        while len(l)<n:
            l=l+(0,)
        s+=(l,)
    return s

def soma_tuple(x):
    res=0
    for i in range(len(x)):
        res += x[i]
    return res

# funcoes principais

def cria_coordenada(l,c):
    if not (isinstance(l,int) and isinstance(c,int) and l*c > 0 ):
        raise ValueError('cria_coordenada: argumentos invalidos')
    return (l,c)


def e_coordenada(uni):
    if (isinstance(uni,tuple) and len(uni) == 2):
        if (isinstance(uni[0],int) and isinstance(uni[1],int)):
            if (uni[0] > 0 and uni[1] > 0):
                return True
    return False



def e_tabuleiro (t):
    if len(t)==3:
        if isinstance (t, list):
            if isinstance (t[0], tuple) and isinstance (t[1], list) and isinstance (t[2], tuple):
                if len(t[0])==len(t[2]):
                    if isinstance (t[1][:], list):
                        if all(isinstance(x, int) and (0<=x<=2) for x in functools.reduce(operator.add, t[1])):
                            return True
                        else:
                            return False
                    else:
                        return False
                else:
                    return False
            else:
                return False
        else:
            return False
    else:
        return False
    
def cria_tabuleiro (t):
    '''A funcao cria um tabuleiro, o qual esta representado por uma lista, sendo o primeiro argumento um tuple com a especificacao das colunas, o ultimo argumento um tuple com a especificacao das linhas e os argumentos do meio sao listas (o mesmo numero de listas como o comprimento da especificacao das colunas) com os argumentos todos a 0 e com comprimento igual ao comprimento do tuple com as especificacoes das linhas.
    A funcao cria_tabuleiro tem como argumento um tuple constituido por dois tuples de inteiros, que representam as especificacoes das linhas e colunas do tabuleiro, respetivamente. '''
    
    if not (isinstance  (t, tuple) and isinstance (t[:], tuple) and len(t)==2 and len(t[0])==len(t[1])):
        raise ValueError('cria_tabuleiro: argumentos invalidos')  
    
    linhas = t[0]
    colunas = t[1]
    coluna_inicial = [0,]*len(linhas)
    
    return [colunas, len(colunas)*[coluna_inicial], linhas]

def tabuleiro_dimensoes (t):
    if not e_tabuleiro(t):
        raise ValueError('tabuçeiro_dimensoes: argumento invalido')
    return (len(t[-1]), len(t[0]))

def tabuleiro_especificacoes (t):
    if not e_tabuleiro(t):
            raise ValueError('tabuçeiro_dimensoes: argumento invalido')    
    return (t[-1], t[0])
    
def tabuleiro_celula (t, c):
    ''' A funcao tabuleiro_cecula tem como argumentos, um tabuleiro 't' que apresenta a estrutura interna '''
    if not (e_coordenada(c) and e_tabuleiro(t)):
        raise ValueError('tabuleiro_celula: argumentos invalidos')
    return t[1][c[1]-1][c[0]-1]

def tabuleiro_preenche_celula (t, c, e):
    if not (e_coordenada(c) and e_tabuleiro(t) and isinstance(e, int) and e <=2 and e >=0):
        raise ValueError('tabuleiro_preenche_celula: argumentos invalidos')
    t[1][c[1]-1][c[0]-1]=e
    return t


def tabuleiros_iguais (t1, t2):
    if not (e_tabuleiro(t1) and e_tabuleiro(t2)):
        raise ValueError('tabuleiros_iguais: argumentos invalidos')
    if tabuleiro_especificacoes(t1) != tabuleiro_especificacoes(t2):
        return False
    if tabuleiro_dimensoes(t1) != tabuleiro_dimensoes(t2):
        return False
    for i in range(1,tabuleiro_dimensoes(t1)[0]):
        for j in range(1, tabuleiro_dimensoes(t1)[1]):
            c = cria_coordenada(i,j)
            if tabuleiro_celula(t1, c) != tabuleiro_celula(t2, c):
                return False
    else:
        return True
    
def escreve_tabuleiro (t):
    if not e_tabuleiro(t):
        raise ValueError('escreve_tabuleiro: argumento invalido')
    
    colunas=acrescenta_tuple_colunas(t[0], lenmax(t[0]))
    linhas=acrescenta_tuple_linhas(t[2], lenmax(t[2]))
    
    for i in range(len(colunas[0])):
        for j in range(len(colunas)):
            r=colunas[j][i]
            if r==0:
                print('   ', end='  ')
            else:
                print('  %d' %r, sep='', end='  ')
        print()
      
    for i in range(1,(tabuleiro_dimensoes(t)[0])+1):
        for j in range(1, (tabuleiro_dimensoes(t)[1])+1):
            c = cria_coordenada(i,j)
            
            if tabuleiro_celula(t, c)==0:
                print('[ %c ]' % '?' , sep='', end='')
            elif tabuleiro_celula(t, c)==1:
                print('[ %c ]' % '.' , sep='', end='')
            else:
                print('[ %c ]' % 'x' , sep='', end='')
                
        for k in range(len(linhas[0])):
            linha=linhas[(c[0])-1][k]
            if linha==0:
                print('   ', end='')
            else:
                print('  %d' % linha, end='')
        print('|')
        

        
        
def tabuleiro_completo (t):
    if not e_tabuleiro(t):
        raise ValueError('tabuleiro_completo: argumento invalido')
    if not all((x!=0) for x in functools.reduce(operator.add, t[1])):
        return False
    else:
        for i in range(0, tabuleiro_dimensoes(t)[1]):
            if soma_tuple(t[0][i]) != t[1][i].count(2):
                return False
        
